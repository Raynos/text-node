{
  "name": "yarnify",
  "version": "0.5.1",
  "description": "knit together html, css, and javascript into reusable bundles",
  "main": "index.js",
  "browserify": "browser.js",
  "bin": {
    "yarnify": "bin/cmd.js"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "findit": "~0.1.2",
    "optimist": "~0.3.4",
    "css-prefix": "~0.0.2",
    "commondir": "~0.0.1"
  },
  "devDependencies": {
    "tap": "~0.2.5",
    "mkdirp": "~0.3.3",
    "domready": "~0.2.11",
    "browserify": "~1.10.15"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/yarnify.git"
  },
  "keywords": [
    "widget",
    "bundle",
    "browserify",
    "ui",
    "reuse"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "yarnify\n=======\n\nKnit together html, css, and javascript into reusable\n[browserifiable](https://github.com/substack/node-browserify)\nbundles with minimal side effects.\n\nAll the classes, IDs, and css selectors in the knitted files are transformed\nwith a prefix value to ensure that no conflicts with existing class names will\noccur when deploying a widget into an unknown environment.\n\n[![build status](https://secure.travis-ci.org/substack/yarnify.png)](http://travis-ci.org/substack/yarnify)\n\n![yarnify](http://substack.net/images/yarnify.png)\n\nexample\n=======\n\nbuild a widget\n--------------\n\nWidgets are just html, css, and javascript.\n\nJust hack up a widget/beep.html:\n\n``` html\n<div class=\"beep\">\n  <div class=\"title\"></div>\n  <div class=\"body\"></div>\n</div>\n```\n\nand write some css for your widget.\n\nThe class names you pick here will be completely local to your widget so don't\nworry about naming. Further, the rules in the css files themselves are\ncompletely local and are bound explicitly to elements.\n\n``` css\n.beep {\n    margin: auto;\n    width: 400px;\n}\n\n.title {\n    font-weight: bold;\n}\n\n.body {\n    padding: 20px;\n    background-color: rgb(48,51,55);\n    color: rgb(220,230,240);\n    border-radius: 10px;\n}\n```\n\nthen bundle all the html in `widget/` into `widget/yarn.js`:\n\n```\n$ yarnify widget -o widget/yarn.js\n```\n\nnow just `require('./yarn')` in a widget/index.js:\n\n``` js\nvar yarn = require('./yarn');\n\nmodule.exports = function (title) {\n    var elem = yarn('beep.html', [ 'beep.css' ]);\n    elem.querySelector('.title').textContent = title;\n    \n    return {\n        body : function (x) {\n            elem.querySelector('.body').textContent = x;\n        },\n        appendTo : function (e) { e.appendChild(elem) }\n    };\n};\n```\n\nNow you can use this widget as a module with browserify!\n\nJust hack up an entry.js:\n\n``` js\nvar domready = require('domready');\nvar widget = require('./widget');\n\ndomready(function () {\n    var w = widget('robots');\n    w.body('in SPACE!');\n    w.appendTo(document.body);\n});\n```\n\nInstall domready and yarnify, then browserify everything up:\n\n```\n$ npm install domready yarnify\n$ browserify entry.js -o bundle.js\n```\n\nNow you can drop the `bundle.js` into some html:\n\n``` html\n<html>\n<head>\n<script src=\"bundle.js\"></script>\n</head>\n</html>\n```\n\nNow you have a reusable bundle that won't clobber any class or ID names in the\nwebapps where you might want to use the widget!\n\nIf you make a nifty reusable widget that other people could benefit from,\nconsider releasing it on npm!\n\nusage\n=====\n\n```\nUsage:\n\n  yarnify [files or directories] OPTIONS\n  \n    Bundle css and html files and directories into a single javascript file.\n    \n    OPTIONS\n      -o output file or '-' (default)\n\n```\n\nmethods\n=======\n\nThese are the methods you can call on generated yarn bundles.\n\n```\nvar yarn = require('./yarn')\n```\n\nvar elem = yarn(file, cssFiles=[])\n----------------------------------\n\nReturn a container div with class `_container` around the html fragment at\n`file`. If `file` doesn't exist in the bundle, returns `undefined`.\n\nFor each of the css files in `cssFiles`, apply the css  file contents to the\nresulting element.\n\nThe html fragment is transformed with a prefix value for all classes and IDs, so\nto get at the class and ID names from original file, use the wrapped\nquery selector methods documented below.\n\nYou can pass the `elem` to jquery or whichever other DOM manipulation\ntoolkit you please, just be aware that the css selector wrapping in those\nlibraries won't work as you might expect.\n\nelem.querySelector(selector)\n----------------------------\n\nLike the standard\n[Element.querySelector](https://developer.mozilla.org/en/DOM/Element.querySelector)\nexcept that classes and IDs will have the document prefix inserted\nautomatically into the selector.\n\nThe returned element will be wrapped with prefix-aware selectors.\n\nelem.querySelectorAll(selector)\n-------------------------------\n\nLike the standard\n[Element.querySelectorAll](https://developer.mozilla.org/en/DOM/Element.querySelectorAll)\nexcept that classes and IDs will have the document prefix inserted\nautomatically into the selector.\n\nThe returned elements will be wrapped with prefix-aware selectors.\n\nelem.addClass(name)\n-------------------\n\nAdd an unprefixed class name string `name`.\n\n`name` will be prefixed and added to the `elem.className` if the element doesn't\nalready have the class.\n\nelem.removeClass(name)\n----------------------\n\nRemove an unprefixed class name string `name`.\n\n`name` will be prefixed and removed from the `elem.className` if the element has\nthe class.\n\nelem.hasClass(name)\n-------------------\n\nReturn whether the element has the unprefixed class name string `name` in its\n`elem.className`.\n\n`name` will be prefixed before checking for class membership.\n\nattributes\n==========\n\nyarn.prefix, elem._prefix\n-------------------------\n\nThe prefix prepended to all class and id values.\n\ntodo\n====\n\n* knit images into the css? and a tool to cut them out again\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install -g yarnify\n```\n\nlicense\n=======\n\nMIT\n",
  "_id": "yarnify@0.5.1",
  "_from": "yarnify@~0.5.1"
}
