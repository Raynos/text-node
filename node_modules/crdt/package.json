{
  "author": {
    "name": "Dominic",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "name": "crdt",
  "description": "Commutative Replicated Data Types for easy distributed/collaborative apps",
  "version": "1.7.1",
  "homepage": "http://github.com/dominictarr/crdt",
  "repository": {
    "url": "git://github.com/dominictarr/crdt.git"
  },
  "scripts": {
    "test": "asynct test/*.js"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "between": "0.0.0"
  },
  "devDependencies": {
    "it-is": "~1.0.1",
    "event-stream": "~2",
    "asynct": "~1.1",
    "kv": "~0.5",
    "mux-demux": "~2.3"
  },
  "optionalDependencies": {},
  "readme": "#CRDT - Commutative Replicated Data Types\n\na CRDT is a data type designed so that opperations on it commute - give the same result\nindepent of the order in which they are applied.\n\nCRDTs give you eventual consistency for free. it is not necessary to track concurrent changes\nand use complicated merge algorithms. this module is useful for collaborative/distributed/peer2peer (same things)\napplications.\n\n\n## peer to peer nodes.\n\nThink of each instance as a node. A node must do two things, \n1) persist and read it's own state. 2) communicate changes in it's state to other nodes.\n\nfor both of these functions a stream api is used.\n\nI wrote [kv](http://github.com/dominictarr/kv) for this purpose, but any JSON stream will do.\n\nbegin by syncing the state:\n``` js\n  var doc = new crdt.Doc()\n\n  kv.get(name)\n    .pipe(doc.createReadStream())  \n\n```\n\nthen pipe `doc.createStream()` to a remote node.\n\n``` js\n  var s = doc.createStream()\n  stream.pipe(s).pipe(stream)\n  \n  stream.on('error', function () {\n    s.destroy()\n  })\n```\n\nDon't forget to listen for unexpected disconnects. Expect the unexpected.\n\n",
  "_id": "crdt@1.7.1",
  "_from": "crdt"
}
